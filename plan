//client wants:
//-a form with the job description, address, budget max and desired completion date inputs
//- to be able to track which employee completed which job
//-the UI to reflect that the job is completed when it was done by maude and/or merle
//-the ability to delete a request

//note of fetch 
//fetch in 3 steps:
        //tell js to fetch the data
        //THEN (.then) tell it to parse the data as json
        //Then (.then) tell it in the 2nd function what you want it to do


//steps:
//create ERD with data entities for the employee, the service request and the completed order
//use fetch() to get all the existing requests and list them on the UI
    //go to daatbase.json and add more data objects
    // go to terminal and run json-server database.json -p 8088 -w
    //create a property named requested in our application state object, found in dataAccess.js
        //set that value to empty array

    //HTTP GET REQUEST WITH FETCH
        //paste boilerplate code into dataAccess.js


//EXPORT REQUESTS STATES
//-Define and export a function named getRequests that returns a copy of requests states

//FETCH STATE BEFORE DISPLAYING
//-Fetch data from the API and store it  in the application state...
//update code found in main.js by adding the fetchRequest function and a .then method


//ADD THE STARTER CODE 
//In the requests.js
//define the function that will be passed to the map method
    //this function converts each service object to an HTML rep
    //return a <li> of HTML rep
    //function should have 1 param
    //the description of the serivce request should be interploated inside the <li> html rep
//update the Requests function to take the the above function as argument to map

//fix bug in index.html that is throwing the null error
//---
//Requesting Services
//COLLECTING USER INPUT with a form
//In serviceForm.js, add boilerplate code 
// then import the html rep into the main html module (sinkRepair) and interpolate it to add the sections of the site

//create another css module and add css styling to the form
    //dont forget to link the new css file in the index.html header

//SUBMIT A SERVICE REQUEST 
//SAVE THE PERM STATE... (when the user clicks the submit button on the form field, my job is to take the transient state and convert it to a perm state by storing it to the database.json file by using a fetch() call)
//paste boilerplate code into dataAccess. js. This function tells the API to create something new. 
//LISTEN FOR THE CLICK
    //add the boilerplate code to serviceForm.js
//watch the video 

//use dev tools to inspect that my fetch is working to GET the data from my json server

//DISPLAY A NEW STATE (implement the stateChanged custom action again)
//update sendRequest function to dispatch the custom event after the POST operation has been completed
//GENERATE NEW HTML ReP
//  create an event listener in main mod to invoke the rendor() function - this will build html again
//check dev tools and add text into input form to check if the data is showing

//DENY SERVICE REQUEST
//Add boilerplate function - function is responsible  for initiating the fetch request for delete (must take pk as argument.)
//add a button in the delete requests for the user to submit delete requests
//add css styling
// add a click event for that delete button 
        //when button is clicked, invoke deleteRequest
        // pass the id of the service request to the deleteRequest funciton as an argument